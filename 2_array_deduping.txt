Question #2: Array Deduping

Write an algorithm that removes duplicates from an array. 
Do not use a function like filter() to solve this. 
Once you have solved the problem, demonstrate how it can be solved with filter(). 

Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi" 7, 53]

Output: [7, 9, "hi", 12, 53]

Questions: 
- create a function that removes duplicates from an array?
- accounting for strings and integers from the input?
- is the argument always going to get array
- will i need to expect anything unexpected? ie booleans? strings ? integers?
- what will I need to handle?

Edge cases: 
-  Possibilty of an Empty Array?



Solution without Filter()

const array = [7, 9, "hi", 12, "hi" 7, 53]; // declaring a const variable

function removeDupes(arr) {     // create a function 'removeDupes', passing 'arr' as the argument
  let newArray = [];            // create a new array for deduped elements;
  for (let i = 0; i < arr.length; i++) {    // create a for loop to iterate over each element of the array
    if (newArray.indexOf(arr[i] === -1) {   // to check a see what hasn't been added 
      newArray.push(arr[i]);                // to new array
    }
  }
  return newArray;   // returns newArray Dedupped
}

const dedupedArray = removeDupes(array);  

* ex of using indexOf
const arr1 ['cat', 'dog', 'mouse'];
arr1.indexOf('dog') === 1
arr1.indexOf('snake') === -1


* Solution with filter()

- implicit return:
  
function removeDupes(arr) { 
  return arr.filter((element, index) => arr.indexOf(element) === index);
}
- Using filter() to create a new array of elements that pass the condition we provide.
 It will include only those elements for which true is returned. Removing dupilcates from the array by
 adjusting our condition.



Possibly solution with recurion.


function removeDupes(arr) {  // create a function 'removeDupes', passing 'arr' as the argument.
  if (arr.length === 0) {     // if 'arr' length is equal to = '0' or is empty. stop the recursive loop
    return arr.concat([]);    //  and return array using .concat to merge all arrays into one array.
  }
  const newArray = arr.slice(0, -1);  // create new array with an offset of -1 to remove last element each time '.slice()'
  if (newArray.includes(arr[arr.length - 1])) {  // compare arrays to check what hasn't been added to the new array.
    return removeDupes(newArray)             // if multiple instances of a single element are found, return and call the function again
  } else {
    return removeDupes(newArray).concat(arr[arr.length - 1]) // if no multiple instances of a single element is found, move on to check next element of index.
  }
}
  


